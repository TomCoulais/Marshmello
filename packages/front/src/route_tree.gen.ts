/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as layoutsPubliclayoutImport } from './routes/(layouts)/public_layout'
import { Route as layoutsProtectedlayoutImport } from './routes/(layouts)/protected_layout'
import { Route as layoutsAuthlayoutImport } from './routes/(layouts)/auth_layout'
import { Route as publicIndexlazyImport } from './routes/(public)/index.lazy'
import { Route as DashboardImport } from './routes/(protected)/dashboard'
import { Route as AuthRegisterImport } from './routes/(public)/auth/register'
import { Route as AuthLoginImport } from './routes/(public)/auth/login'

// Create/Update Routes

const layoutsPubliclayoutRoute = layoutsPubliclayoutImport.update({
  id: '/_public_layout',
  getParentRoute: () => rootRoute,
} as any)

const layoutsProtectedlayoutRoute = layoutsProtectedlayoutImport.update({
  id: '/_protected_layout',
  getParentRoute: () => rootRoute,
} as any)

const layoutsAuthlayoutRoute = layoutsAuthlayoutImport.update({
  id: '/_auth_layout',
  getParentRoute: () => rootRoute,
} as any)

const publicIndexlazyRoute = publicIndexlazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => layoutsPubliclayoutRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => layoutsProtectedlayoutRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => layoutsAuthlayoutRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => layoutsAuthlayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth_layout': {
      id: '/_auth_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof layoutsAuthlayoutImport
      parentRoute: typeof rootRoute
    }
    '/_protected_layout': {
      id: '/_protected_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof layoutsProtectedlayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public_layout': {
      id: '/_public_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof layoutsPubliclayoutImport
      parentRoute: typeof rootRoute
    }
    '/_protected_layout/dashboard': {
      id: '/_protected_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof layoutsProtectedlayoutImport
    }
    '/_public_layout/': {
      id: '/_public_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexlazyImport
      parentRoute: typeof layoutsPubliclayoutImport
    }
    '/_auth_layout/auth/login': {
      id: '/_auth_layout/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof layoutsAuthlayoutImport
    }
    '/_auth_layout/auth/register': {
      id: '/_auth_layout/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof layoutsAuthlayoutImport
    }
  }
}

// Create and export the route tree

interface layoutsAuthlayoutRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const layoutsAuthlayoutRouteChildren: layoutsAuthlayoutRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const layoutsAuthlayoutRouteWithChildren =
  layoutsAuthlayoutRoute._addFileChildren(layoutsAuthlayoutRouteChildren)

interface layoutsProtectedlayoutRouteChildren {
  DashboardRoute: typeof DashboardRoute
}

const layoutsProtectedlayoutRouteChildren: layoutsProtectedlayoutRouteChildren =
  {
    DashboardRoute: DashboardRoute,
  }

const layoutsProtectedlayoutRouteWithChildren =
  layoutsProtectedlayoutRoute._addFileChildren(
    layoutsProtectedlayoutRouteChildren,
  )

interface layoutsPubliclayoutRouteChildren {
  publicIndexlazyRoute: typeof publicIndexlazyRoute
}

const layoutsPubliclayoutRouteChildren: layoutsPubliclayoutRouteChildren = {
  publicIndexlazyRoute: publicIndexlazyRoute,
}

const layoutsPubliclayoutRouteWithChildren =
  layoutsPubliclayoutRoute._addFileChildren(layoutsPubliclayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof layoutsPubliclayoutRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/': typeof publicIndexlazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRoutesByTo {
  '': typeof layoutsProtectedlayoutRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/': typeof publicIndexlazyRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth_layout': typeof layoutsAuthlayoutRouteWithChildren
  '/_protected_layout': typeof layoutsProtectedlayoutRouteWithChildren
  '/_public_layout': typeof layoutsPubliclayoutRouteWithChildren
  '/_protected_layout/dashboard': typeof DashboardRoute
  '/_public_layout/': typeof publicIndexlazyRoute
  '/_auth_layout/auth/login': typeof AuthLoginRoute
  '/_auth_layout/auth/register': typeof AuthRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/dashboard' | '/' | '/auth/login' | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/dashboard' | '/' | '/auth/login' | '/auth/register'
  id:
    | '__root__'
    | '/_auth_layout'
    | '/_protected_layout'
    | '/_public_layout'
    | '/_protected_layout/dashboard'
    | '/_public_layout/'
    | '/_auth_layout/auth/login'
    | '/_auth_layout/auth/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  layoutsAuthlayoutRoute: typeof layoutsAuthlayoutRouteWithChildren
  layoutsProtectedlayoutRoute: typeof layoutsProtectedlayoutRouteWithChildren
  layoutsPubliclayoutRoute: typeof layoutsPubliclayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  layoutsAuthlayoutRoute: layoutsAuthlayoutRouteWithChildren,
  layoutsProtectedlayoutRoute: layoutsProtectedlayoutRouteWithChildren,
  layoutsPubliclayoutRoute: layoutsPubliclayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth_layout",
        "/_protected_layout",
        "/_public_layout"
      ]
    },
    "/_auth_layout": {
      "filePath": "(layouts)/auth_layout.tsx",
      "children": [
        "/_auth_layout/auth/login",
        "/_auth_layout/auth/register"
      ]
    },
    "/_protected_layout": {
      "filePath": "(layouts)/protected_layout.tsx",
      "children": [
        "/_protected_layout/dashboard"
      ]
    },
    "/_public_layout": {
      "filePath": "(layouts)/public_layout.tsx",
      "children": [
        "/_public_layout/"
      ]
    },
    "/_protected_layout/dashboard": {
      "filePath": "(protected)/dashboard.tsx",
      "parent": "/_protected_layout"
    },
    "/_public_layout/": {
      "filePath": "(public)/index.lazy.tsx",
      "parent": "/_public_layout"
    },
    "/_auth_layout/auth/login": {
      "filePath": "(public)/auth/login.tsx",
      "parent": "/_auth_layout"
    },
    "/_auth_layout/auth/register": {
      "filePath": "(public)/auth/register.tsx",
      "parent": "/_auth_layout"
    }
  }
}
ROUTE_MANIFEST_END */
